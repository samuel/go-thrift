{
// DO NOT EDIT. Code generated by pigeon, run "go generate" to update.

package parser

import (
	"bytes"
	"strconv"
	"strings"
)

type namespace struct {
	scope string
	namespace string
}

type exception *Struct

type union *Struct

type include string

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

func ifaceSliceToString(v interface{}) string {
	ifs := toIfaceSlice(v)
	b := make([]byte, len(ifs))
	for i, v := range ifs {
		b[i] = v.([]uint8)[0]
	}
	return string(b)
}

// toStruct converts a union to a struct with all fields optional.
func unionToStruct(u union) *Struct {
	st := (*Struct)(u)
	for _, f := range st.Fields {
		f.Optional = true
	}
	return st
}

func toAnnotations(v interface{}) []*Annotation {
	if v == nil {
		return nil
	}
	return v.([]*Annotation)
}
}

Grammar ← __ statements:( Statement __ )* (EOF / SyntaxError) {
	thrift := &Thrift{
		Includes: make(map[string]string),
		Namespaces: make(map[string]string),
		Typedefs: make(map[string]*Typedef),
		Constants: make(map[string]*Constant),
		Enums: make(map[string]*Enum),
		Structs: make(map[string]*Struct),
		Exceptions: make(map[string]*Struct),
		Unions: make(map[string]*Struct),
		Services: make(map[string]*Service),
	}
	stmts := toIfaceSlice(statements)
	for _, st := range stmts {
		switch v := st.([]interface{})[0].(type) {
		case *namespace:
			thrift.Namespaces[v.scope] = v.namespace
		case *Constant:
			thrift.Constants[v.Name] = v
		case *Enum:
			thrift.Enums[v.Name] = v
		case *Typedef:
			thrift.Typedefs[v.Alias] = v
		case *Struct:
			thrift.Structs[v.Name] = v
		case exception:
			thrift.Exceptions[v.Name] = (*Struct)(v)
		case union:
			thrift.Unions[v.Name] = unionToStruct(v)
		case *Service:
			thrift.Services[v.Name] = v
		case include:
			name := filepath.Base(string(v))
			if ix := strings.LastIndex(name, "."); ix > 0 {
				name = name[:ix]
			}
			thrift.Includes[name] = string(v)
		default:
			return nil, fmt.Errorf("parser: unknown value %#v", v)
		}
	}
	return thrift, nil
}

SyntaxError ← . {
	return nil, errors.New("parser: syntax error")
}

Include ← "include" _ file:Literal EOS {
	return include(file.(string)), nil
}

Statement ← Include / Namespace / Const / Enum / TypeDef / Struct / Exception / Union / Service

Namespace ← "namespace" _ scope:[*a-z0-9.-]+ _ ns:Identifier EOS {
	return &namespace{
		scope: ifaceSliceToString(scope),
		namespace: string(ns.(Identifier)),
	}, nil
}

Const ← "const" _ typ:FieldType _ name:Identifier __ "=" __ value:ConstValue EOS {
	return &Constant{
		Name: string(name.(Identifier)),
		Type: typ.(*Type),
		Value: value,
	}, nil
}

Enum ← "enum" _ name:Identifier __ '{' __ values:(EnumValue __)* '}' _ annotations:TypeAnnotations? EOS {
	vs := toIfaceSlice(values)
	en := &Enum{
		Name: string(name.(Identifier)),
		Values: make(map[string]*EnumValue, len(vs)),
		Annotations: toAnnotations(annotations),
	}
	// Assigns numbers in order. This will behave badly if some values are
	// defined and other are not, but I think that's ok since that's a silly
	// thing to do.
	next := 0
	for _, v := range vs {
		ev := v.([]interface{})[0].(*EnumValue)
		if !ev.Set {
			ev.Value = next
		}
		if ev.Value >= next {
			next = ev.Value + 1
		}
		en.Values[ev.Name] = ev
	}
	return en, nil
}

EnumValue ← name:Identifier _ value:('=' _ IntConstant)? _ annotations:TypeAnnotations? ListSeparator? {
	ev := &EnumValue{
		Name: string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}
	if value != nil {
		ev.Value = int(value.([]interface{})[2].(int64))
		ev.Set = true
	}
	return ev, nil
}

TypeDef ← "typedef" _ typ:FieldType _ name:Identifier _ annotations:TypeAnnotations? EOS {
	return &Typedef{
		Type: typ.(*Type),
		Alias: string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}, nil
}

Struct ← "struct" _ st:StructLike { return st.(*Struct), nil }
Exception ← "exception" _ st:StructLike { return exception(st.(*Struct)), nil }
Union ← "union" _ st:StructLike { return union(st.(*Struct)), nil }
StructLike ← name:Identifier __ '{' __ fields:FieldList '}' _ annotations:TypeAnnotations? EOS {
	st := &Struct{
		Name: string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}
	if fields != nil {
		st.Fields = fields.([]*Field)
	}
	return st, nil
}

FieldList ← fields:(Field __)* {
	fs := fields.([]interface{})
	flds := make([]*Field, len(fs))
	ids := make(map[int]bool, len(fs))
	for i, f := range fs {
		flds[i] = f.([]interface{})[0].(*Field)

		if ids[flds[i].ID] {
			return nil, fmt.Errorf("multiple fields with the same identifier: %d", flds[i].ID)
		}

		ids[flds[i].ID] = true
	}
	return flds, nil
}

FieldID ← id:IntConstant _ ':' {
	return int(id.(int64)), nil
}

Field ← id:FieldID? _ req:FieldReq? _ typ:FieldType __ name:Identifier __ def:('=' _ ConstValue)? _ annotations:TypeAnnotations? ListSeparator? {
	parsedID := -1
	if id != nil {
		parsedID = id.(int)
	}

	f := &Field{
		ID       : parsedID,
		Name     : string(name.(Identifier)),
		Type     : typ.(*Type),
		Annotations: toAnnotations(annotations),
	}
	if req != nil && !req.(bool) {
		f.Optional = true
	}
	if def != nil {
		f.Default = def.([]interface{})[2]
	}
	return f, nil
}

FieldReq ← ("required" / "optional") {
	return !bytes.Equal(c.text, []byte("optional")), nil
}

Service ← "service" _ name:Identifier _ extends:("extends" __ Identifier __)? __ '{' __ methods:(Function __)* ('}' / EndOfServiceError) _ annotations:TypeAnnotations?  EOS {
	ms := methods.([]interface{})
	svc := &Service{
		Name: string(name.(Identifier)),
		Methods: make(map[string]*Method, len(ms)),
		Annotations: toAnnotations(annotations),
	}
	if extends != nil {
		svc.Extends = string(extends.([]interface{})[2].(Identifier))
	}
	for _, m := range ms {
		mt :=  m.([]interface{})[0].(*Method)
		svc.Methods[mt.Name] = mt
	}
	return svc, nil
}
EndOfServiceError ← . {
	return nil, errors.New("parser: expected end of service")
}

Function ← oneway:("oneway" __)? typ:FunctionType __ name:Identifier _ '(' __ arguments:FieldList ')' __ exceptions:Throws? _ annotations:TypeAnnotations? ListSeparator? {
	m := &Method{
		Name: string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}
	t := typ.(*Type)
	if t.Name != "void" {
		m.ReturnType = t
	}
	if oneway != nil {
		m.Oneway = true
	}
	if arguments != nil {
		m.Arguments = arguments.([]*Field)
	}
	if exceptions != nil {
		m.Exceptions = exceptions.([]*Field)
		for _, e := range m.Exceptions {
			e.Optional = true
		}
	}
	return m, nil
}

FunctionType ← typ:("void" / FieldType) {
	if t, ok := typ.(*Type); ok {
		return t, nil
	}
	return &Type{Name: string(c.text)}, nil
}

Throws ← "throws" __ '(' __ exceptions:FieldList ')' {
	return exceptions, nil
}

FieldType ← typ:(BaseType / ContainerType / Identifier) {
	if t, ok := typ.(Identifier); ok {
		return &Type{Name: string(t)}, nil
	}
	return typ, nil
}

DefinitionType ← typ:(BaseType / ContainerType) {
	return typ, nil
}

BaseType ← name:BaseTypeName _ annotations:TypeAnnotations? {
	return &Type{
		Name: name.(string),
		Annotations: toAnnotations(annotations),
	}, nil
}

BaseTypeName ← ("bool" / "byte" / "i16" / "i32" / "i64" / "double" / "string" / "binary" ) {
	return string(c.text), nil
}

ContainerType ← typ:(MapType / SetType / ListType) {
	return typ, nil
}

MapType ← CppType? "map" WS "<" WS key:FieldType WS "," __ value:FieldType WS ">" _ annotations:TypeAnnotations? {
	return &Type{
		Name: "map",
		KeyType: key.(*Type),
		ValueType: value.(*Type),
		Annotations: toAnnotations(annotations),
	}, nil
}

SetType ← CppType? "set" WS "<" WS typ:FieldType WS ">" _ annotations:TypeAnnotations? {
	return &Type{
		Name: "set",
		ValueType: typ.(*Type),
		Annotations: toAnnotations(annotations),
	}, nil
}

ListType ← "list" WS "<" WS typ:FieldType WS ">" _ annotations:TypeAnnotations? {
	return &Type{
		Name: "list",
		ValueType: typ.(*Type),
		Annotations: toAnnotations(annotations),
	}, nil
}

CppType ← "cpp_type" cppType:Literal {
	return cppType, nil
}

ConstValue ← Literal / DoubleConstant / IntConstant / BoolConstant / ConstMap / ConstList / Identifier

TypeAnnotations ← '(' __ annotations:TypeAnnotation* ')' {
	var anns []*Annotation
	for _, ann := range annotations.([]interface{}) {
		anns = append(anns, ann.(*Annotation))
	}
	return anns, nil
}

TypeAnnotation ← name:Identifier _ value:('=' __ value:Literal { return value, nil })? ListSeparator? __ {
	var optValue string
	if value != nil {
		optValue = value.(string)
	}
	return &Annotation{
	  Name: string(name.(Identifier)),
		Value: optValue,
	}, nil
}

BoolConstant ← ("true" / "false") {
	return string(c.text) == "true", nil
}

IntConstant ← [-+]? Digit+ {
	return strconv.ParseInt(string(c.text), 10, 64)
}

DoubleConstant ← [+-]? Digit* '.' Digit* ( ['Ee'] IntConstant )? {
	return strconv.ParseFloat(string(c.text), 64)
}

ConstList ← '[' __ values:(ConstValue __ ListSeparator? __)* __ ']' {
	valueSlice := values.([]interface{})
	vs := make([]interface{}, len(valueSlice))
	for i, v := range valueSlice {
		vs[i] = v.([]interface{})[0]
	}
	return vs, nil
}

ConstMap ← '{' __ values:(ConstValue __ ':' __ ConstValue __ (','? / &'}') __)* '}' {
	if values == nil {
		return nil, nil
	}
	vals := values.([]interface{})
	kvs := make([]KeyValue, len(vals))
	for i, kv := range vals {
		v := kv.([]interface{})
		kvs[i] = KeyValue{
			Key: v[0],
			Value: v[4],
		}
	}
	return kvs, nil
}

Literal ← (('"' (`\"` / [^"])* '"') / ('\'' (`\'` / [^'])* '\'')) {
	if len(c.text) != 0 && c.text[0] == '\'' {
		return strconv.Unquote(`"` + strings.Replace(string(c.text[1:len(c.text)-1]), `\'`, `'`, -1) + `"`)
	}
	return strconv.Unquote(string(c.text))
}

Identifier ← (Letter / '_')+ (Letter / Digit / [._])* {
	return Identifier(string(c.text)), nil
}

ListSeparator ← [,;]
Letter ← [A-Za-z]
Digit ← [0-9]

//

SourceChar ← .
Comment ← MultiLineComment / SingleLineComment
MultiLineComment ← "/*" ( !"*/" SourceChar )* "*/"
MultiLineCommentNoLineTerminator ← "/*" ( !( "*/" / EOL ) SourceChar )* "*/"
SingleLineComment ← ("//" ( !EOL SourceChar )*) / ("#" ( !EOL SourceChar )*)

__ ← ( Whitespace / EOL / Comment )*
_ ← ( Whitespace / MultiLineCommentNoLineTerminator )*
WS ← Whitespace*

Whitespace ← [ \t\r]
EOL ← '\n'
EOS ← __ ';' / _ SingleLineComment? EOL / __ EOF

EOF ← !.
